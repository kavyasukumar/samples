<style>

.background ***REMOVED***
  fill: none;
  pointer-events: all;
***REMOVED***

.feature ***REMOVED***
  fill: #ccc;
  cursor: pointer;
***REMOVED***

.feature.active ***REMOVED***
  fill: red;
***REMOVED***

.mesh ***REMOVED***
  fill: none;
  stroke: #fff;
  stroke-linecap: round;
  stroke-linejoin: round;
***REMOVED***

</style>
<body>
<script src="//d3js.org/d3.v4.min.js"></script>
<script src="//d3js.org/topojson.v1.min.js"></script>
<script>

var tester;

var width = 960,
    height = 500,
    active = d3.select(null);

// var projection = d3.geoMercator()
//     .scale(300)
//     .translate([width,height]);

var projection = d3.geoAlbersUsa()
    .scale(1000)
    .translate([width / 2, height / 2]);

var zoom = d3.zoom()
    .on("zoom", zoomed);

var initialTransform = d3.zoomIdentity
    .translate(0,0)
    .scale(1);

var path = d3.geoPath()
    .projection(projection);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height)
    .on("click", stopped, true);

svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
    .on("click", reset);

var g = svg.append("g");

svg
    .call(zoom) // delete this line to disable free zooming
    .call(zoom.transform, initialTransform);

d3.json("https://gist.githubusercontent.com/mbostock/4090846/raw/d534aba169207548a8a3d670c9c2cc719ff05c47/us.json", function(error, us) ***REMOVED***
  if (error) throw error;

  // svg.append("g")
  //     .attr("class", "counties")
  //   .selectAll("path")
  //   .data(topojson.feature(us, us.objects.counties).features)
  //   .enter().append("path")
  //     // .attr("fill", function(d) ***REMOVED***
  //     //   if(String(d.id).length === 4)***REMOVED***
  //     //     d.id = '0'+String(d.id);
  //     //   ***REMOVED***
  //     //   if(color(d.count = data[d.id]))***REMOVED***
  //     //     return color(d.count = data[d.id]);
  //     //   ***REMOVED*** else ***REMOVED***
  //     //     return '#ccc';
  //     //   ***REMOVED***
  //     // ***REMOVED***)
  //     .attr("d", path)
  //     .attr("stroke", function(d)***REMOVED***
  //       if(d.count)***REMOVED*** return '#fff'; ***REMOVED***
  //     ***REMOVED***)
  //     .attr('stroke-width', '0.5px')
  //     .on("click", clicked)
  //   .append("title")
  //     .text(function(d) ***REMOVED*** return d.count; ***REMOVED***);

  g.selectAll("path")
      .data(topojson.feature(us, us.objects.counties).features)
    .enter().append("path")
      .attr("d", path)
      .attr("class", "feature")
      .on("click", clicked);

  g.append("path")
      .datum(topojson.mesh(us, us.objects.states, function(a, b) ***REMOVED*** return a !== b; ***REMOVED***))
      .attr("class", "mesh")
      .attr("d", path);

  tester = topojson.feature(us, us.objects.states).features[0];
***REMOVED***);

function clicked(d) ***REMOVED***
  if (active.node() === this) return reset();
  active.classed("active", false);
  active = d3.select(this).classed("active", true);

  var bounds = path.bounds(tester),
      dx = bounds[1][0] - bounds[0][0],
      dy = bounds[1][1] - bounds[0][1],
      x = (bounds[0][0] + bounds[1][0]) / 2,
      y = (bounds[0][1] + bounds[1][1]) / 2,
      scale = Math.max(1, Math.min(8, 0.9 / Math.max(dx / width, dy / height))),
      translate = [width / 2 - scale * x, height / 2 - scale * y];

  var transform = d3.zoomIdentity
    .translate(translate[0], translate[1])
    .scale(scale);

  svg.transition()
      .duration(750)
      .call(zoom.transform, transform);
***REMOVED***

function reset() ***REMOVED***
  active.classed("active", false);
  active = d3.select(null);

  svg.transition()
      .duration(750)
      .call(zoom.transform, initialTransform);
***REMOVED***

function zoomed() ***REMOVED***
  var transform = d3.event.transform;

  g.style("stroke-width", 1.5 / transform.k + "px");
  g.attr("transform", transform);
***REMOVED***

// If the drag behavior prevents the default click,
// also stop propagation so we donâ€™t click-to-zoom.
function stopped() ***REMOVED***
  if (d3.event.defaultPrevented) d3.event.stopPropagation();
***REMOVED***

</script>
